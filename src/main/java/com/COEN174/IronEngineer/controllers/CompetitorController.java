package com.COEN174.IronEngineer.controllers;

import com.COEN174.IronEngineer.entities.Competitor;
import com.COEN174.IronEngineer.repositories.CompetitorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller
@RequestMapping(path="/competitor")
public class CompetitorController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompetitorRepository competitorRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Competitor> getAllCompetitors() {
        // This returns a JSON or XML with the users
        return competitorRepository.findAll();
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewCompetitor (@RequestParam String name,@RequestParam  String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Competitor c = new Competitor();
        c.setName(name);
        c.setEmail(email);
        c.setPassword(password);
        competitorRepository.save(c);
        return c.toString();
//        return "Saved.";
    }

    @PostMapping(path="/update/{catergory}")
    public @ResponseBody String updateCompetitorProgress(@RequestParam Integer id, @PathVariable("catergoy") String catergory, @RequestParam Integer distance){
        Optional<Competitor> c = competitorRepository.findById(id);
        if(!(c.isPresent())){
            return "Invalid Competitor.";
        }

        Competitor comp = c.get();

        switch(catergory){
            case "swimming":
                Integer dist = comp.getDistanceSwam();
                dist += distance;
                comp.setDistanceSwam(dist);
                competitorRepository.save(comp);
                break;
            case "running":
                Integer dist1 = comp.getDistanceRan();
                dist1 += distance;
                comp.setDistanceRan(dist1);
                competitorRepository.save(comp);
                break;
            case "biking":
                Integer dist2 = comp.getDistanceBiked();
                dist2 += distance;
                comp.setDistanceBiked(dist2);
                competitorRepository.save(comp);
                break;
            default:
                return "Invalid catergory";
        }
        return "distance updated.";

    }


}
